# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import worker_pb2 as worker__pb2


class WorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setDriverPort = channel.unary_unary(
                '/workerPackage.Worker/setDriverPort',
                request_serializer=worker__pb2.driverPort.SerializeToString,
                response_deserializer=worker__pb2.status.FromString,
                )
        self.map = channel.unary_unary(
                '/workerPackage.Worker/map',
                request_serializer=worker__pb2.kmeansInput.SerializeToString,
                response_deserializer=worker__pb2.status.FromString,
                )
        self.reduce = channel.unary_unary(
                '/workerPackage.Worker/reduce',
                request_serializer=worker__pb2.kmeansReduce.SerializeToString,
                response_deserializer=worker__pb2.status.FromString,
                )
        self.die = channel.unary_unary(
                '/workerPackage.Worker/die',
                request_serializer=worker__pb2.empty.SerializeToString,
                response_deserializer=worker__pb2.status.FromString,
                )
        self.sendPartitionedData = channel.unary_unary(
                '/workerPackage.Worker/sendPartitionedData',
                request_serializer=worker__pb2.PartitionRequest.SerializeToString,
                response_deserializer=worker__pb2.MapperData.FromString,
                )


class WorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def setDriverPort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def map(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def die(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendPartitionedData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setDriverPort': grpc.unary_unary_rpc_method_handler(
                    servicer.setDriverPort,
                    request_deserializer=worker__pb2.driverPort.FromString,
                    response_serializer=worker__pb2.status.SerializeToString,
            ),
            'map': grpc.unary_unary_rpc_method_handler(
                    servicer.map,
                    request_deserializer=worker__pb2.kmeansInput.FromString,
                    response_serializer=worker__pb2.status.SerializeToString,
            ),
            'reduce': grpc.unary_unary_rpc_method_handler(
                    servicer.reduce,
                    request_deserializer=worker__pb2.kmeansReduce.FromString,
                    response_serializer=worker__pb2.status.SerializeToString,
            ),
            'die': grpc.unary_unary_rpc_method_handler(
                    servicer.die,
                    request_deserializer=worker__pb2.empty.FromString,
                    response_serializer=worker__pb2.status.SerializeToString,
            ),
            'sendPartitionedData': grpc.unary_unary_rpc_method_handler(
                    servicer.sendPartitionedData,
                    request_deserializer=worker__pb2.PartitionRequest.FromString,
                    response_serializer=worker__pb2.MapperData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workerPackage.Worker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Worker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def setDriverPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workerPackage.Worker/setDriverPort',
            worker__pb2.driverPort.SerializeToString,
            worker__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def map(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workerPackage.Worker/map',
            worker__pb2.kmeansInput.SerializeToString,
            worker__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workerPackage.Worker/reduce',
            worker__pb2.kmeansReduce.SerializeToString,
            worker__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def die(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workerPackage.Worker/die',
            worker__pb2.empty.SerializeToString,
            worker__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendPartitionedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workerPackage.Worker/sendPartitionedData',
            worker__pb2.PartitionRequest.SerializeToString,
            worker__pb2.MapperData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
