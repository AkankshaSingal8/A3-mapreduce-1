# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mapreduce_pb2, mapreduce_pb2_grpc


class KMeansServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMap = channel.unary_unary(
                '/kmeans.KMeansService/ProcessMap',
                request_serializer=mapreduce_pb2.TaskRequest.SerializeToString,
                response_deserializer=mapreduce_pb2.TaskResponse.FromString,
                )
        self.ProcessReduce = channel.unary_unary(
                '/kmeans.KMeansService/ProcessReduce',
                request_serializer=mapreduce_pb2.TaskRequest.SerializeToString,
                response_deserializer=mapreduce_pb2.TaskResponse.FromString,
                )
        self.FetchData = channel.unary_unary(
                '/kmeans.KMeansService/FetchData',
                request_serializer=mapreduce_pb2.FetchRequest.SerializeToString,
                response_deserializer=mapreduce_pb2.FetchResponse.FromString,
                )


class KMeansServiceServicer():
    def ProcessMap(self, request, context):
        # Placeholder: process each data point to find the nearest centroid
        # Actual implementation would process the data chunk and return a list of (centroid_id, data_point)
        return mapreduce_pb2.TaskResponse(success=True, message='Map completed')

    def ProcessReduce(self, request, context):
        # Placeholder: aggregate data points by centroid and recalculate centroids
        # Return the new centroid positions
        return mapreduce_pb2.TaskResponse(success=True, message='Reduce completed')

    def FetchData(self, request, context):
        # Placeholder: fetch intermediate data for a given centroid key
        # This would typically query data from a data store or file system
        return mapreduce_pb2.FetchResponse(dataPoints=[1.0, 2.0, 3.0])  # Example points


def add_KMeansServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMap': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMap,
                    request_deserializer=mapreduce_pb2.TaskRequest.FromString,
                    response_serializer=mapreduce_pb2.TaskResponse.SerializeToString,
            ),
            'ProcessReduce': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessReduce,
                    request_deserializer=mapreduce_pb2.TaskRequest.FromString,
                    response_serializer=mapreduce_pb2.TaskResponse.SerializeToString,
            ),
            'FetchData': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchData,
                    request_deserializer=mapreduce_pb2.FetchRequest.FromString,
                    response_serializer=mapreduce_pb2.FetchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kmeans.KMeansService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KMeansService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeansService/ProcessMap',
            mapreduce_pb2.TaskRequest.SerializeToString,
            mapreduce_pb2.TaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessReduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=5000,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeansService/ProcessReduce',
            mapreduce_pb2.TaskRequest.SerializeToString,
            mapreduce_pb2.TaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=5000,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeansService/FetchData',
            mapreduce_pb2.FetchRequest.SerializeToString,
            mapreduce_pb2.FetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
